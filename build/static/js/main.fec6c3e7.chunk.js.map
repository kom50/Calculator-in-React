{"version":3,"sources":["index.js","Calculator.module.css","Calculator.js"],"names":["ReactDOM","render","document","getElementById","module","exports","Calculator","props","changeHandler","value","expression","state","exp","check","parseInt","toString","substr","length","index","i","charCodeAt","indexOf","isOperator","charAt","eval","setState","op","operators","forEach","arr","buttons","className","styles","header","container","Field","data","this","map","button","Button","handler","Component","items","type","onClick","event","target","disabled"],"mappings":"uHAAA,8CAIAA,IAASC,OAAQ,cAAC,IAAD,IAAgBC,SAASC,eAAe,U,kBCHzDC,EAAOC,QAAU,CAAC,OAAS,2BAA2B,UAAY,8BAA8B,MAAQ,4B,w1CCClGC,W,kZACF,oBAAYC,OAAQ,IAAD,0MACf,uBAAMA,OADS,MAQnBC,cAAgB,SAACC,OACb,IAAIC,WAAa,MAAKC,MAAMC,IAC5B,GAAa,OAAVH,MAIKC,WAHA,MAAKG,MAAMH,aAA8B,KAAfA,WAGb,IAFCI,SAASJ,YAAcI,SAASJ,aAAcK,gBAK/D,GAAa,MAAVN,MACJC,WAAaA,WAAWM,OAAO,EAAGN,WAAWO,OAAS,QAErD,GAAa,OAAVR,MACJC,WAAa,QACX,GAAa,MAAVD,YAEH,GAAa,MAAVA,MAAc,CACnB,IAAIS,OAAS,EACb,GAAkB,KAAfR,WACCA,WAAa,SACZ,CACD,IAAI,IAAIS,EAAIT,WAAWO,OAAS,EAAGE,GAAK,EAAGA,IACvC,GAAGT,WAAWU,WAAWD,GAAK,IAAMT,WAAWU,WAAWD,GAAK,GAAG,CAC9DD,MAAQC,EACR,OAG+B,IAApCT,WAAWW,QAAQ,IAAKH,SACpB,MAAKI,WAAWZ,WAAWa,OAAOb,WAAWO,OAAS,IACrDP,YAAc,KAEdA,YAAc,UAIX,MAAVD,MACiB,KAAnB,MAAKE,MAAMC,IACN,MAAKU,WAAWZ,WAAWa,OAAOb,WAAWO,OAAS,MACtDP,WAAac,KAAK,MAAKb,MAAMC,KAAKG,YAGxCL,WAAa,GAIZ,MAAKY,WAAWb,QACZ,MAAKa,WAAWZ,WAAWa,OAAOb,WAAWO,OAAS,IACrDP,WAAaA,WAAWM,OAAO,EAAGN,WAAWO,OAAS,GAAKR,MAK/DC,YAA0BD,MAKlC,MAAKgB,SAAS,CAACb,IAAMF,cAjEN,MAoEnBY,WAAa,SAACI,GAEX,MAAe,MAAPA,GAAqB,MAAPA,GAAqB,MAAPA,GAAqB,MAAPA,GAtElC,MAyEnBb,MAAQ,SAACD,GAEL,MAAKe,UAAUC,SAAQ,SAACC,EAAKX,GACzB,OAA6B,IAAtBN,EAAIS,QAAQQ,OA1EvB,MAAKF,UAAY,CAAC,IAAK,IAAK,IAAK,IAAI,KACrC,MAAKhB,MAAQ,CACTmB,QAAU,CAAC,KAAM,IAAK,KAAM,IAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAM,IAAK,IAAK,IAAM,IAAM,IAAK,IAAK,KAC3GlB,IAAM,IALK,M,gNA+EnB,WAAU,IAAD,OACL,OACI,+HACA,iEAAImB,UAAaC,8DAAOC,OAAxB,wBACE,mEAAKF,UAAaC,8DAAOE,UAAzB,UACE,2DAACC,MAAD,CAAOC,KAASC,KAAK1B,MAAMC,MAEvByB,KAAK1B,MAAMmB,QAAQQ,KAAI,SAACC,EAAQrB,GAC5B,OAAO,2DAACsB,OAAD,CAAQC,QAAW,SAAChC,GACH,EAAKD,cAAcC,IAI3CA,MAAQ8B,GACDrB,gB,YA9FNwB,8CAuGzB,SAASF,OAAOjC,GACZ,OACI,oEAAQwB,UAAcC,8DAAOW,MACrBC,KAAK,SACLnC,MAAUF,EAAME,MAChBoC,QAAY,SAACC,GACTvC,EAAMkC,QAAQK,EAAMC,OAAOtC,UAO/C,SAAS0B,MAAM5B,GACX,OACI,oEAAQwB,UAAcC,8DAAOW,MACrBC,KAAK,OACLnC,MAAUF,EAAM6B,KAChBY,UAAW,IAIZ1C,mC","file":"static/js/main.fec6c3e7.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './Calculator.js';\n\nReactDOM.render( <Calculator />, document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Calculator_header__3DEro\",\"container\":\"Calculator_container__3IPrO\",\"items\":\"Calculator_items__1DOAC\"};","import { Component} from 'react'\r\nimport styles from './Calculator.module.css';\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.operators = ['+', '-', '%', '*','/'];\r\n        this.state = {\r\n            buttons : ['pw', 'c', 'ce', '/',  '7', '8', '9', '*', '4', '5', '6', '-',  '1', '2', '3',  '+',  '0', '.', '='],\r\n            exp : \"\",\r\n        }\r\n    }\r\n    changeHandler = (value)=>{\r\n        let expression = this.state.exp;  // assign state.exp value to expression local variable\r\n        if(value === 'pw'){\r\n            if(!this.check(expression) && expression !== ''){\r\n                expression = (parseInt(expression) * parseInt(expression) ).toString();\r\n            }else{\r\n                expression = '';\r\n            }\r\n        }\r\n        else if(value === 'c'){\r\n            expression = expression.substr(0, expression.length - 1);\r\n        }\r\n        else if(value === 'ce'){\r\n            expression = '';\r\n        }else if(value === '%'){ // Not work \r\n            // expression = '';\r\n        }else if(value === '.'){\r\n            let index = -1;\r\n            if(expression === ''){\r\n                expression = '0.'\r\n            }else{\r\n                for(let i = expression.length - 1; i >= 0; i--){\r\n                    if(expression.charCodeAt(i) < 48 || expression.charCodeAt(i) > 57){\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if(expression.indexOf('.', index) === -1){\r\n                    if(this.isOperator(expression.charAt(expression.length - 1))){\r\n                        expression += '0.'\r\n                    }else{\r\n                        expression += '.'\r\n                    }\r\n                }\r\n            }\r\n        }else if(value === '='){    // Equal button\r\n            if(this.state.exp !== ''){\r\n                if(!this.isOperator(expression.charAt(expression.length - 1)))\r\n                    expression = eval(this.state.exp).toString()   \r\n            }\r\n            else {\r\n              expression = ''; \r\n            }\r\n        }\r\n        else{\r\n            if(this.isOperator(value)){\r\n                if(this.isOperator(expression.charAt(expression.length - 1)))\r\n                    expression = expression.substr(0, expression.length - 1) + value;   // If expression last index contains operator then that operator is remove from expression and add given operator \r\n                else\r\n                    expression = expression + value;    // If expression last index doesn't contain operator then given operator is added directly at the last index of the expression\r\n            }else{\r\n                // if pressed button is not a operator then pressed button value is added in last index of the expression\r\n                expression = expression + value;\r\n            }\r\n        }\r\n        // Update Expression \r\n        // And exp is update when the componentDidUpdate method is Call\r\n        this.setState({exp : expression }); \r\n    };\r\n\r\n    isOperator = (op)=>{\r\n        // op - operator\r\n       return (op === '+' || op === '-' || op === '*' || op === '/') ? true : false;\r\n    }\r\n    // Check given expression contains any operator\r\n    check = (exp)=>{\r\n        // this.operators =\r\n        this.operators.forEach((arr, index)=>{\r\n            return exp.indexOf(arr) === -1 ? true : false;\r\n        })\r\n    }\r\n    render() {\r\n        return( \r\n            <>\r\n            <h3 className = {styles.header } >Calculator</h3>\r\n              <div className = {styles.container} >\r\n                <Field data = { this.state.exp }/>\r\n                {\r\n                    this.state.buttons.map((button, index) =>{\r\n                        return <Button handler = {(value) => {\r\n                                                this.changeHandler(value)\r\n                                                // console.log('Change ', value)\r\n                                            }\r\n                                        }\r\n                        value= {button}\r\n                        key = {index} />\r\n                    })\r\n                }\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <input  className = { styles.items } \r\n                type=\"button\" \r\n                value = { props.value } \r\n                onClick = { (event)=>{\r\n                    props.handler(event.target.value)\r\n                    //    console.log(event.target.value)\r\n            }\r\n       }/>\r\n    )\r\n}\r\n\r\nfunction Field(props){\r\n    return (\r\n        <input  className = { styles.items } \r\n                type=\"text\"\r\n                value = { props.data } \r\n                disabled= {true} />\r\n    )\r\n}\r\n\r\nexport default Calculator;"],"sourceRoot":""}