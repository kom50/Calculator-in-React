{"version":3,"sources":["index.js","Calculator.module.css","Calculator.js"],"names":["ReactDOM","render","document","getElementById","module","exports","Calculator","props","changeHandler","value","expression","state","exp","check","parseInt","toString","substr","length","index","i","charCodeAt","indexOf","isOperator","charAt","eval","setState","op","operators","forEach","arr","buttons","className","styles","header","container","Field","data","this","map","button","Button","handler","Component","items","type","onClick","event","target","disabled"],"mappings":"uHAAA,8CAIAA,IAASC,OAAQ,cAAC,IAAD,IAAgBC,SAASC,eAAe,U,kBCHzDC,EAAOC,QAAU,CAAC,OAAS,2BAA2B,UAAY,8BAA8B,MAAQ,4B,w1CCClGC,W,kZACF,oBAAYC,OAAQ,IAAD,0MACf,uBAAMA,OADS,MA4BnBC,cAAgB,SAACC,OACb,IAAIC,WAAa,MAAKC,MAAMC,IAC5B,GAAc,OAAVH,MAMIC,WALC,MAAKG,MAAMH,aAA8B,KAAfA,WAKd,IAHTI,SAASJ,YAAcI,SAASJ,aAClCK,gBAIH,GAAc,MAAVN,MACPC,WAAaA,WAAWM,OAAO,EAAGN,WAAWO,OAAS,QACnD,GAAc,OAAVR,MACPC,WAAa,QACV,GAAc,MAAVD,YAGJ,GAAc,MAAVA,MAAe,CACtB,IAAIS,OAAS,EACb,GAAmB,KAAfR,WACAA,WAAa,SACV,CACH,IAAK,IAAIS,EAAIT,WAAWO,OAAS,EAAGE,GAAK,EAAGA,IACxC,GACIT,WAAWU,WAAWD,GAAK,IAC3BT,WAAWU,WAAWD,GAAK,GAC7B,CACED,MAAQC,EACR,OAGgC,IAApCT,WAAWW,QAAQ,IAAKH,SAEpB,MAAKI,WACDZ,WAAWa,OAAOb,WAAWO,OAAS,IAG1CP,YAAc,KAEdA,YAAc,UAIT,MAAVD,MAEgB,KAAnB,MAAKE,MAAMC,IACN,MAAKU,WAAWZ,WAAWa,OAAOb,WAAWO,OAAS,MACvDP,WAAac,KAAK,MAAKb,MAAMC,KAAKG,YAEtCL,WAAa,GAGb,MAAKY,WAAWb,QACZ,MAAKa,WAAWZ,WAAWa,OAAOb,WAAWO,OAAS,IACtDP,WACIA,WAAWM,OAAO,EAAGN,WAAWO,OAAS,GAAKR,MAKtDC,YAA0BD,MAKlC,MAAKgB,SAAS,CAAEb,IAAKF,cA7FN,MAgGnBY,WAAa,SAACI,GAEV,MAAc,MAAPA,GAAqB,MAAPA,GAAqB,MAAPA,GAAqB,MAAPA,GAlGlC,MAuGnBb,MAAQ,SAACD,GAEL,MAAKe,UAAUC,SAAQ,SAACC,EAAKX,GACzB,OAA6B,IAAtBN,EAAIS,QAAQQ,OAxGvB,MAAKF,UAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KACtC,MAAKhB,MAAQ,CACTmB,QAAS,CACL,KACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEJlB,IAAK,IAzBM,M,gNA6GnB,WAAU,IAAD,OACL,OACI,+HACI,iEAAImB,UAAWC,8DAAOC,OAAtB,wBACA,mEAAKF,UAAWC,8DAAOE,UAAvB,UACI,2DAACC,MAAD,CAAOC,KAAMC,KAAK1B,MAAMC,MACvByB,KAAK1B,MAAMmB,QAAQQ,KAAI,SAACC,EAAQrB,GAC7B,OACI,2DAACsB,OAAD,CACIC,QAAS,SAAChC,GACN,EAAKD,cAAcC,IAGvBA,MAAO8B,GACFrB,gB,YA5HZwB,8CAsIzB,SAASF,OAAOjC,GACZ,OACI,oEACIwB,UAAWC,8DAAOW,MAClBC,KAAK,SACLnC,MAAOF,EAAME,MACboC,QAAS,SAACC,GACNvC,EAAMkC,QAAQK,EAAMC,OAAOtC,UAO3C,SAAS0B,MAAM5B,GACX,OACI,oEACIwB,UAAWC,8DAAOW,MAClBC,KAAK,OACLnC,MAAOF,EAAM6B,KACbY,UAAU,IAKP1C,mC","file":"static/js/main.ba4814e4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './Calculator.js';\n\nReactDOM.render( <Calculator />, document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Calculator_header__3DEro\",\"container\":\"Calculator_container__3IPrO\",\"items\":\"Calculator_items__1DOAC\"};","import { Component } from 'react';\r\nimport styles from './Calculator.module.css';\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.operators = ['+', '-', '%', '*', '/'];\r\n        this.state = {\r\n            buttons: [\r\n                'pw',\r\n                'c',\r\n                'ce',\r\n                '/',\r\n                '7',\r\n                '8',\r\n                '9',\r\n                '*',\r\n                '4',\r\n                '5',\r\n                '6',\r\n                '-',\r\n                '1',\r\n                '2',\r\n                '3',\r\n                '+',\r\n                '0',\r\n                '.',\r\n                '=',\r\n            ],\r\n            exp: '',\r\n        };\r\n    }\r\n    changeHandler = (value) => {\r\n        let expression = this.state.exp; // assign state.exp value to expression local variable\r\n        if (value === 'pw') {\r\n            if (!this.check(expression) && expression !== '') {\r\n                expression = (\r\n                    parseInt(expression) * parseInt(expression)\r\n                ).toString();\r\n            } else {\r\n                expression = '';\r\n            }\r\n        } else if (value === 'c') {\r\n            expression = expression.substr(0, expression.length - 1);\r\n        } else if (value === 'ce') {\r\n            expression = '';\r\n        } else if (value === '%') {\r\n            // Not work\r\n            // expression = '';\r\n        } else if (value === '.') {\r\n            let index = -1;\r\n            if (expression === '') {\r\n                expression = '0.';\r\n            } else {\r\n                for (let i = expression.length - 1; i >= 0; i--) {\r\n                    if (\r\n                        expression.charCodeAt(i) < 48 ||\r\n                        expression.charCodeAt(i) > 57\r\n                    ) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if (expression.indexOf('.', index) === -1) {\r\n                    if (\r\n                        this.isOperator(\r\n                            expression.charAt(expression.length - 1)\r\n                        )\r\n                    ) {\r\n                        expression += '0.';\r\n                    } else {\r\n                        expression += '.';\r\n                    }\r\n                }\r\n            }\r\n        } else if (value === '=') {\r\n            // Equal button\r\n            if (this.state.exp !== '') {\r\n                if (!this.isOperator(expression.charAt(expression.length - 1)))\r\n                    expression = eval(this.state.exp).toString();\r\n            } else {\r\n                expression = '';\r\n            }\r\n        } else {\r\n            if (this.isOperator(value)) {\r\n                if (this.isOperator(expression.charAt(expression.length - 1)))\r\n                    expression =\r\n                        expression.substr(0, expression.length - 1) + value;\r\n                // If expression last index contains operator then that operator is remove from expression and add given operator\r\n                else expression = expression + value; // If expression last index doesn't contain operator then given operator is added directly at the last index of the expression\r\n            } else {\r\n                // if pressed button is not a operator then pressed button value is added in last index of the expression\r\n                expression = expression + value;\r\n            }\r\n        }\r\n        // Update Expression\r\n        // And exp is update when the componentDidUpdate method is Call\r\n        this.setState({ exp: expression });\r\n    };\r\n\r\n    isOperator = (op) => {\r\n        // op - operator\r\n        return op === '+' || op === '-' || op === '*' || op === '/'\r\n            ? true\r\n            : false;\r\n    };\r\n    // Check given expression contains any operator\r\n    check = (exp) => {\r\n        // this.operators =\r\n        this.operators.forEach((arr, index) => {\r\n            return exp.indexOf(arr) === -1 ? true : false;\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <h3 className={styles.header}>Calculator</h3>\r\n                <div className={styles.container}>\r\n                    <Field data={this.state.exp} />\r\n                    {this.state.buttons.map((button, index) => {\r\n                        return (\r\n                            <Button\r\n                                handler={(value) => {\r\n                                    this.changeHandler(value);\r\n                                    // console.log('Change ', value)\r\n                                }}\r\n                                value={button}\r\n                                key={index}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <input\r\n            className={styles.items}\r\n            type=\"button\"\r\n            value={props.value}\r\n            onClick={(event) => {\r\n                props.handler(event.target.value);\r\n                //    console.log(event.target.value)\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Field(props) {\r\n    return (\r\n        <input\r\n            className={styles.items}\r\n            type=\"text\"\r\n            value={props.data}\r\n            disabled={true}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Calculator;\r\n"],"sourceRoot":""}